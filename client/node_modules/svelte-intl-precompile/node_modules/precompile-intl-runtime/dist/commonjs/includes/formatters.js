"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTimeFormatter = exports.getDateFormatter = exports.getNumberFormatter = void 0;
const utils_js_1 = require("./utils.js");
const memoize_js_1 = require("./memoize.js");
const getIntlFormatterOptions = (type, name) => {
    const { formats } = (0, utils_js_1.getOptions)();
    if (type in formats && name in formats[type]) {
        return formats[type][name];
    }
    throw new Error(`[precompile-intl-runtime] Unknown "${name}" ${type} format.`);
};
exports.getNumberFormatter = (0, memoize_js_1.monadicMemoize)(({ locale, format, ...options } = {}) => {
    locale = locale || (0, utils_js_1.getCurrentLocale)();
    if (locale == null) {
        throw new Error('[precompile-intl-runtime] A "locale" must be set to format numbers');
    }
    if (typeof format === 'string') {
        return new Intl.NumberFormat(locale, getIntlFormatterOptions('number', format));
    }
    else {
        return new Intl.NumberFormat(locale, options);
    }
});
exports.getDateFormatter = (0, memoize_js_1.monadicMemoize)(({ locale, format, ...options } = {}) => {
    locale = locale || (0, utils_js_1.getCurrentLocale)();
    if (locale == null) {
        throw new Error('[precompile-intl-runtime] A "locale" must be set to format dates');
    }
    if (format) {
        options = getIntlFormatterOptions('date', format);
    }
    else if (Object.keys(options).length === 0) {
        options = getIntlFormatterOptions('date', 'short');
    }
    return new Intl.DateTimeFormat(locale, options);
});
exports.getTimeFormatter = (0, memoize_js_1.monadicMemoize)(({ locale, format, ...options } = {}) => {
    locale = locale || (0, utils_js_1.getCurrentLocale)();
    if (locale == null) {
        throw new Error('[precompile-intl-runtime] A "locale" must be set to format time values');
    }
    if (format) {
        options = getIntlFormatterOptions('time', format);
    }
    else if (Object.keys(options).length === 0) {
        options = getIntlFormatterOptions('time', 'short');
    }
    return new Intl.DateTimeFormat(locale, options);
});
