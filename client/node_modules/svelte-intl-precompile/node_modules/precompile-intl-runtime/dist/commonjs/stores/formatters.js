"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.$getJSON = exports.$formatNumber = exports.$formatDate = exports.$formatTime = exports.$format = exports.formatNumber = exports.formatDate = exports.formatTime = exports.getJSON = exports.formatMessage = void 0;
const store_1 = require("svelte/store");
const lookup_js_1 = require("../includes/lookup.js");
const loaderQueue_js_1 = require("../includes/loaderQueue.js");
const formatters_js_1 = require("../includes/formatters.js");
const utils_js_1 = require("../includes/utils.js");
const dictionary_js_1 = require("./dictionary.js");
const locale_js_1 = require("./locale.js");
const formatMessage = (currentLocale, optionsOrId, maybeOptions = {}) => {
    const id = typeof optionsOrId === 'string' ? optionsOrId : optionsOrId.id;
    const options = typeof optionsOrId === 'string' ? maybeOptions : optionsOrId;
    const { values, locale = currentLocale || (0, utils_js_1.getCurrentLocale)(), default: defaultValue, } = options;
    if (locale == null) {
        throw new Error('[svelte-intl-precompile] Cannot format a message without first setting the initial locale.');
    }
    let message = (0, lookup_js_1.lookup)(id, locale);
    if (typeof message === 'string') {
        return message;
    }
    if (typeof message === 'function') {
        return message(...Object.keys(options.values || {}).sort().map(k => (options.values || {})[k]));
    }
    if ((0, utils_js_1.getOptions)().warnOnMissingMessages) {
        // istanbul ignore next
        console.warn(`[svelte-intl-precompile] The message "${id}" was not found in "${(0, utils_js_1.getPossibleLocales)(locale).join('", "')}".${(0, loaderQueue_js_1.hasLocaleQueue)((0, utils_js_1.getCurrentLocale)())
            ? `\n\nNote: there are at least one loader still registered to this locale that wasn't executed.`
            : ''}`);
    }
    return defaultValue || id;
};
exports.formatMessage = formatMessage;
const getJSON = (id, locale) => {
    locale = locale || (0, utils_js_1.getCurrentLocale)();
    return (0, lookup_js_1.lookup)(id, locale) || id;
};
exports.getJSON = getJSON;
const formatTime = (currentLocale, t, options) => {
    const locale = currentLocale || (0, utils_js_1.getCurrentLocale)();
    return (0, formatters_js_1.getTimeFormatter)({ locale, ...options }).format(t);
};
exports.formatTime = formatTime;
const formatDate = (currentLocale, d, options) => {
    const locale = currentLocale || (0, utils_js_1.getCurrentLocale)();
    return (0, formatters_js_1.getDateFormatter)({ locale, ...options }).format(d);
};
exports.formatDate = formatDate;
const formatNumber = (currentLocale, n, options) => {
    const locale = currentLocale || (0, utils_js_1.getCurrentLocale)();
    return (0, formatters_js_1.getNumberFormatter)({ locale, ...options }).format(n);
};
exports.formatNumber = formatNumber;
exports.$format = (0, store_1.derived)([locale_js_1.$locale, dictionary_js_1.$dictionary], ([currentLocale]) => exports.formatMessage.bind(null, currentLocale));
exports.$formatTime = (0, store_1.derived)([locale_js_1.$locale], ([currentLocale]) => exports.formatTime.bind(null, currentLocale));
exports.$formatDate = (0, store_1.derived)([locale_js_1.$locale], ([currentLocale]) => exports.formatDate.bind(null, currentLocale));
exports.$formatNumber = (0, store_1.derived)([locale_js_1.$locale], ([currentLocale]) => exports.formatNumber.bind(null, currentLocale));
exports.$getJSON = (0, store_1.derived)([locale_js_1.$locale, dictionary_js_1.$dictionary], () => exports.getJSON);
